  <div class="content-container">
    <h1>Détails de la Session</h1>

    <div class="session-info">
      <p><strong>ID de la session :</strong> <%= session.id %></p>
      <p><strong>Type de session :</strong> <%= session.type %></p>
      <p><strong>Statut :</strong> <%= session.is_active ? "Active" : "Inactive" %></p>
      <p><strong>Date de début :</strong> <%= session.start_time ? new Date(session.start_time).toLocaleString('fr-FR') : 'Non démarrée' %></p>
      <p><strong>Date de fin :</strong> <%= session.end_time ? new Date(session.end_time).toLocaleString('fr-FR') : 'Non terminée' %></p>
    </div>

    <div class="btncontainer">
      <% if (!session.started) { %>
      <button class="button btn-primary" id="startSessionButton">Demarrer session</button>
      <% } %>

      <% if (session.started && !session.ended) { %>
      <button class="button btn-primary" id="endSessionButton">Terminer sessions</button>
      <% } %>

      <button class="button danger-btn" id="deleteSessionButton">Annuler Session</button>
    </div>

    <div id="myGrid" class="ag-theme-alpine"></div>

    <div id="dataContainer" data-row-data='<%= JSON.stringify(propositions).replace(/'/g, "&#39;") %>' style="display: none;"></div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.noStyle.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const startSessionButton = document.getElementById('startSessionButton');
      const endSessionButton = document.getElementById('endSessionButton');
      const deleteSessionButton = document.getElementById('deleteSessionButton');
      const sessionId = '<%= session.id %>';

      if (startSessionButton) {
        startSessionButton.addEventListener('click', () => {
          Swal.fire({
            title: 'Are you sure?',
            text: "This will start the voting session.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#004d99',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, start it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/voting-sessions/${sessionId}/start`, {
                  method: 'POST'
                })
                .then(response => response.json())
                .then(result => {
                  Swal.fire('Success', 'Session started successfully!', 'success');
                  location.reload();
                })
                .catch(() => Swal.fire('Error', 'Failed to start session.', 'error'));
            }
          });
        });
      }

      if (endSessionButton) {
        endSessionButton.addEventListener('click', () => {
          Swal.fire({
            title: 'Are you sure?',
            text: "This will end the voting session.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#004d99',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, end it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/voting-sessions/${sessionId}/end`, {
                  method: 'POST'
                })
                .then(response => response.json())
                .then(result => {
                  Swal.fire('Success', 'Session ended successfully!', 'success');
                  setTimeout(() => {
                    location.reload();
                  }, 1500)
                })
                .catch(() => Swal.fire('Error', 'Failed to end session.', 'error'));
            }
          });
        });
      }

      if (deleteSessionButton) {
        deleteSessionButton.addEventListener('click', () => {
          Swal.fire({
            title: 'Are you sure?',
            text: "This will cancel and delete the voting session.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/voting-sessions/${sessionId}`, {
                  method: 'DELETE'
                })
                .then(response => response.json())
                .then(result => {
                  Swal.fire('Deleted!', 'Session has been deleted.', 'success');
                  if (result.error) {
                    Swal.fire('Error', 'Failed to delete session.', 'error')
                  } else {
                    setTimeout(() => {
                      window.location.href = '/voting-sessions';
                    }, 1500)
                  }
                })
                .catch(() => Swal.fire('Error', 'Failed to delete session.', 'error'));
            }
          });
        });
      }
      const columnDefs = [{
          headerName: "ID",
          field: "id",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 1
        },
        {
          headerName: "Nom Utilisateur",
          field: "full_name",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 1.5
        },
        {
          headerName: "Objet",
          field: "objet",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 1.5
        },
        {
          headerName: "Description Situation Actuelle",
          field: "description_situation_actuelle",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 3
        },
        {
          headerName: "Description Amélioration Proposée",
          field: "description_amelioration_proposee",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 3
        },
        {
          headerName: "Exclue",
          field: "is_excluded",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 1,
          cellRenderer: params => params.value ? 'Oui' : 'Non'
        },
        {
          headerName: "Date d'émission",
          field: "date_emission",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 1.5,
          valueFormatter: params => new Date(params.value).toLocaleDateString('fr-FR')
        },
        {
          headerName: "Note Moyenne",
          field: "average_grade",
          sortable: true,
          filter: true,
          resizable: true,
          flex: 1,
          valueFormatter: params => params.value ? params.value.toFixed(2) : 'N/A'
        },
        {
          headerName: "Détails",
          cellRenderer: (params) => {
            return `<button class="button details-button" data-id="${params.data.id}">Détails</button>`;
          },
          flex: 2
        }
      ];

      const dataContainer = document.getElementById('dataContainer');
      const rowData = JSON.parse(dataContainer.getAttribute('data-row-data'));

      const gridOptions = {
        columnDefs: columnDefs,
        rowData: rowData,
        pagination: true,
        paginationPageSize: 10,
        domLayout: 'autoHeight',
        suppressRowClickSelection: true
      };

      const eGridDiv = document.querySelector('#myGrid');
      const grid = new agGrid.Grid(eGridDiv, gridOptions);

      eGridDiv.addEventListener('click', (event) => {
        if (event.target.classList.contains('details-button')) {
          const propositionId = event.target.getAttribute('data-id');
          window.location.href = `/voting-sessions/proposition/${propositionId}`;
        }
      });
    });
  </script>